generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- User Authentication and Team Management ---

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  username     String // Changed: Username is now required
  passwordHash String
  avatar       String? // 头像URL
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  ownedTeams    Team[]               @relation("TeamOwner")
  memberships   Membership[]
  merchandises  Merchandise[]        @relation("UserMerchandise")
  articles      Article[]            @relation("UserArticles")
  imageJobs     ImageGenerationJob[] @relation("UserImageGenerationJobs")
  styleProfiles StyleProfile[]       @relation("UserStyleProfiles")
  audiences     Audience[]           @relation("UserAudiences")
  outlines      Outline[]            @relation("UserOutlines")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String
  owner       User     @relation("TeamOwner", fields: [ownerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  memberships     Membership[]
  activationCodes ActivationCode[]
  articles        Article[]
  imageJobs       ImageGenerationJob[]

  styleProfiles StyleProfile[]
  audiences     Audience[]
  outlines      Outline[]
  merchandises  Merchandise[]
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

model Membership {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id])
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

// --- Activation Code Model (Updated for Team Invitations) ---

model ActivationCode {
  id        String   @id @default(cuid())
  code      String   @unique // Ensure code generated by API is unique
  email     String
  teamId    String?  // Make teamId optional for universal codes
  isUniversal Boolean @default(false) // New field to mark universal codes
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  // expiresAt DateTime? // Optional: Add later if needed

  team Team? @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId, email])
  @@index([isUniversal])
}

// --- Existing Resources Updated ---

model StyleProfile {
  id            String    @id @default(cuid())
  name          String
  description   String?
  authorInfo    String?
  styleFeatures String?
  sampleText    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  articles      Article[]
  outlines      Outline[]

  teamId String
  team   Team   @relation(fields: [teamId], references: [id])

  // Add creator relationship
  userId String
  user   User   @relation("UserStyleProfiles", fields: [userId], references: [id])

  @@unique([name, teamId])
  @@index([teamId])
  @@index([userId])
}

model Audience {
  id               String            @id @default(cuid())
  name             String
  description      String?
  type             String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  tags             String[]
  outlineAudiences OutlineAudience[]

  teamId String
  team   Team   @relation(fields: [teamId], references: [id])

  // Add creator relationship
  userId String
  user   User   @relation("UserAudiences", fields: [userId], references: [id])

  @@unique([name, teamId])
  @@index([teamId])
  @@index([userId])
}

model Outline {
  id               String            @id @default(cuid())
  title            String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  styleProfileId   String
  content          String
  userKeyPoints    String?
  articles         Article[]
  styleProfile     StyleProfile      @relation(fields: [styleProfileId], references: [id])
  outlineAudiences OutlineAudience[]

  teamId String
  team   Team   @relation(fields: [teamId], references: [id])

  // New fields for Merchandise linkage
  merchandiseId String? // Optional: ID of the linked merchandise
  merchandise   Merchandise? @relation(fields: [merchandiseId], references: [id], onDelete: SetNull)

  // Add creator relationship
  userId String
  user   User   @relation("UserOutlines", fields: [userId], references: [id])

  @@unique([title, teamId])
  @@index([teamId])
  @@index([merchandiseId]) // Index for the new foreign key
  @@index([userId])
}

model OutlineAudience {
  outlineId  String
  audienceId String
  assignedAt DateTime @default(now())
  audience   Audience @relation(fields: [audienceId], references: [id], onDelete: Cascade)
  outline    Outline  @relation(fields: [outlineId], references: [id], onDelete: Cascade)

  @@id([outlineId, audienceId])
}

model Article {
  id                  String               @id @default(cuid())
  title               String
  content             String
  structuredContent   Json?
  status              String               @default("draft")
  writingPurpose      String[]
  contentAnalyst      String?              // 新增字段：AI生成文章的分析说明
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  outlineId           String
  styleProfileId      String
  targetAudienceIds   String[]
  outline             Outline              @relation(fields: [outlineId], references: [id])
  styleProfile        StyleProfile         @relation(fields: [styleProfileId], references: [id])
  imageGenerationJobs ImageGenerationJob[]
  teamId              String
  team                Team                 @relation(fields: [teamId], references: [id])

  // Add creator relationship
  userId String
  user   User   @relation("UserArticles", fields: [userId], references: [id])

  @@unique([title, teamId])
  @@index([teamId])
  @@index([userId])
}

model ImageGenerationJob {
  id                   String   @id @default(cuid())
  prompt               String
  placeholderTag       String
  articleId            String?
  status               String
  imageUrl             String?
  errorMessage         String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  difyTaskId           String?
  difyWorkflowRunId    String?
  imageBase64          String?
  originalDifyImageUrl String?
  mimeType             String?
  article              Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  teamId               String
  team                 Team     @relation(fields: [teamId], references: [id])

  // Add creator relationship
  userId String
  user   User   @relation("UserImageGenerationJobs", fields: [userId], references: [id])

  @@index([teamId])
  @@index([userId])
}

model Merchandise {
  id         String   @id @default(cuid())
  name       String
  summary    String?
  source     String // URL, file path, or manual input identifier
  sourceType String // 'url', 'file', or 'manual'
  tags       String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  teamId   String
  team     Team      @relation(fields: [teamId], references: [id])
  outlines Outline[] // Back-relation to Outlines

  // Add creator relationship
  userId String // Foreign key for the creator User
  user   User   @relation("UserMerchandise", fields: [userId], references: [id])

  @@unique([name, teamId]) // Ensures merchandise name is unique per team
  @@index([userId]) // Add index for faster queries by user
}
